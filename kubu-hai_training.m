# Load and preprocess data
trainDataPath = 'data/train';
testDataPath = 'data/test';
imageSize = [150, 150];

# Load training data
imdsTrain = imageDatastore(trainDataPath, ...
'IncludeSubfolders', true, ...
'LabelSource', 'foldernames');

# Enhanced data augmentation
imageAugmenter = imageDataAugmenter( ...
'RandRotation', [-20, 20], ...
'RandXTranslation', [-10, 10], ...
'RandYTranslation', [-10, 10], ...
'RandXScale', [0.8, 1.2], ...
'RandYScale', [0.8, 1.2], ...
'RandBrightness', [0.8, 1.2], ...
'RandContrast', [0.8, 1.2]);

augmentedTrain = augmentedImageDatastore(imageSize, imdsTrain, 'DataAugmentation', imageAugmenter);

# Load test data
imdsTest = imageDatastore(testDataPath, ...
'IncludeSubfolders', true, ...
'LabelSource', 'foldernames');

# Resize images
augmentedTest = augmentedImageDatastore(imageSize, imdsTest);

# Use a pre-trained model (Transfer Learning)
net = resnet50;
lgraph = layerGraph(net);

# Modify the last layers for your specific task
numClasses = 2;
newLayers = [
fullyConnectedLayer(numClasses, 'Name', 'new_fc', 'WeightLearnRateFactor', 10, 'BiasLearnRateFactor', 10)
softmaxLayer('Name', 'new_softmax')
classificationLayer('Name', 'new_classoutput')];

lgraph = replaceLayer(lgraph, 'fc1000', newLayers(1));
lgraph = replaceLayer(lgraph, 'ClassificationLayer_fc1000', newLayers(3));

# Set training options with early stopping and learning rate scheduling
options = trainingOptions('adam', ...
'InitialLearnRate', 0.0001, ...
'MaxEpochs', 30, ...
'MiniBatchSize', 32, ...
'ValidationData', augmentedTest, ...
'ValidationFrequency', 30, ...
'Verbose', false, ...
'Plots', 'training-progress', ...
'Shuffle', 'every-epoch', ...
'LearnRateSchedule', 'piecewise', ...
'LearnRateDropFactor', 0.1, ...
'LearnRateDropPeriod', 10, ...
'EarlyStopping', true, ...
'EarlyStoppingPatience', 5);

# Train the network
net = trainNetwork(augmentedTrain, lgraph, options);

# Evaluate the network
YPred = classify(net, augmentedTest);
YTest = imdsTest.Labels;

accuracy = sum(YPred == YTest) / numel(YTest);
disp(['Test accuracy: ', num2str(accuracy)]);

# Save the trained model
save('kubu_hai_model.mat', 'net');
